name: CI - Comprehensive Testing & Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Cancel previous runs if a new one is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # HARDHAT SMART CONTRACTS
  # ============================================================================
  hardhat-tests:
    name: Smart Contracts - Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Run tests
        run: npm test

      - name: Generate coverage report
        run: npm run coverage
        continue-on-error: true # Don't fail if coverage doesn't meet threshold

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: hardhat-coverage
          path: coverage/
          retention-days: 7

  hardhat-slither:
    name: Smart Contracts - Slither Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Run Slither analysis
        uses: crytic/slither-action@v0.4.1
        with:
          slither-args: --print human-summary
        continue-on-error: true # Don't fail build on security warnings

  # ============================================================================
  # CROSS-CHAIN TESTING
  # ============================================================================
  cross-chain-tests:
    name: Smart Contracts - Cross-Chain Comparison Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run compile

      - name: Test on Hardhat (Local)
        run: npx hardhat run scripts/test-cross-chain.js --network hardhat

      - name: Upload test results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: cross-chain-test-results
          path: |
            test-results/
          retention-days: 7

  # ============================================================================
  # GO BACKEND
  # ============================================================================
  backend-tests:
    name: Backend - Tests (Unit & Integration)
    runs-on: ubuntu-latest

    # PostgreSQL service for integration tests
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: token_vesting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum

      - name: Install dependencies
        working-directory: ./backend
        run: go mod download

      - name: Run unit tests
        working-directory: ./backend
        run: |
          chmod +x test.sh
          ./test.sh -u -v

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/token_vesting_test?sslmode=disable
        run: ./test.sh -i -v

      - name: Generate coverage report
        working-directory: ./backend
        run: ./test.sh -c

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: backend-coverage
          path: backend/coverage.out
          retention-days: 7

  backend-lint:
    name: Backend - Linting & Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
          cache-dependency-path: backend/go.sum

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run golangci-lint
        working-directory: ./backend
        run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m
        continue-on-error: true # Don't fail build on linting warnings

      - name: Check code formatting
        working-directory: ./backend
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'make fmt' locally."
            gofmt -s -l .
            exit 1
          fi

  # ============================================================================
  # NEXT.JS FRONTEND
  # ============================================================================
  frontend-checks:
    name: Frontend - TypeScript, Linting & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run security audit
        working-directory: ./frontend
        run: |
          npm audit --audit-level=high || true
          # Fail on critical vulnerabilities only
          npm audit --audit-level=critical
        continue-on-error: false

      - name: Run TypeScript type checking
        working-directory: ./frontend
        run: npx tsc --noEmit

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Build production bundle
        working-directory: ./frontend
        run: |
          if [ -z "$NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID" ]; then
            echo "WARNING: NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID is not set. Using a dummy value for CI."
            export NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID='dummy-project-id-for-ci'
          fi
          npm run build
        env:
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
          NEXT_PUBLIC_TOKEN_ADDRESS: '0x0000000000000000000000000000000000000000'
          NEXT_PUBLIC_VESTING_ADDRESS: '0x0000000000000000000000000000000000000000'

      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        if: success()
        with:
          name: frontend-build
          path: frontend/.next/
          retention-days: 7

  # ============================================================================
  # SUMMARY JOB (optional but recommended)
  # ============================================================================
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [hardhat-tests, hardhat-slither, cross-chain-tests, backend-tests, backend-lint, frontend-checks]
    if: always()

    steps:
      - name: Check overall status
        run: |
          echo "=== CI Pipeline Summary ==="
          echo "Hardhat Tests: ${{ needs.hardhat-tests.result }}"
          echo "Slither Analysis: ${{ needs.hardhat-slither.result }}"
          echo "Cross-Chain Tests: ${{ needs.cross-chain-tests.result }}"
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Backend Lint: ${{ needs.backend-lint.result }}"
          echo "Frontend Checks: ${{ needs.frontend-checks.result }}"

          if [[ "${{ needs.hardhat-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.cross-chain-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.backend-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.frontend-checks.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed!"
            exit 1
          else
            echo "✅ All critical checks passed!"
          fi
